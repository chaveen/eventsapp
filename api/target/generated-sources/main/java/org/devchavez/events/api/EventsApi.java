/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.devchavez.events.api;

import org.devchavez.events.api.model.Event;
import org.devchavez.events.api.model.SearchCriteria;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-07-08T10:46:52.859-04:00[America/New_York]")

@Validated
@Api(value = "events", description = "the events API")
public interface EventsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Adds a new Event", nickname = "createEvent", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Validation exception"),
        @ApiResponse(code = 201, message = "Successful") })
    @RequestMapping(value = "/events",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> createEvent(@ApiParam(value = "new Event"  )  @Valid @RequestBody Event event) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Search Event by criteria", nickname = "searchEvent", notes = "", response = Event.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Validation Exception"),
        @ApiResponse(code = 200, message = "Successful", response = Event.class, responseContainer = "List") })
    @RequestMapping(value = "/events/search",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<Event>> searchEvent(@ApiParam(value = ""  )  @Valid @RequestBody SearchCriteria searchCriteria) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"environment\" : \"environment\",  \"component\" : \"component\",  \"data\" : \"data\",  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",  \"message\" : \"message\",  \"email\" : \"email\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
